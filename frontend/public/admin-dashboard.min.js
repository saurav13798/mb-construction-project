class AdminDashboard{constructor(){this.isLoggedIn=!1,this.currentUser=null,this.apiUrl="localhost"===window.location.hostname?"http://localhost:3000":window.location.origin,this.init()}init(){this.checkAuthStatus(),this.bindEvents(),this.isLoggedIn&&this.loadDashboardData()}bindEvents(){const t=document.getElementById("login-form");t&&t.addEventListener("submit",t=>this.handleLogin(t));const e=document.getElementById("logout-btn");e&&e.addEventListener("click",()=>this.handleLogout()),this.isLoggedIn&&setInterval(()=>this.loadDashboardData(),3e4)}checkAuthStatus(){const t=localStorage.getItem("admin_token"),e=localStorage.getItem("admin_user");t&&e?this.verifyToken(t).then(t=>{t?(this.isLoggedIn=!0,this.currentUser=JSON.parse(e),this.showDashboard(),this.loadDashboardData()):(this.clearAuthData(),this.showLogin())}):this.showLogin()}async verifyToken(t){try{return(await fetch(`${this.apiUrl}/api/admin/verify`,{method:"GET",headers:{Authorization:`Bearer ${t}`}})).ok}catch(t){return!1}}async handleLogin(t){t.preventDefault();const e=t.target,n=new FormData(e),a=e.querySelector('button[type="submit"]'),o=a.textContent;try{a.textContent="Logging in...",a.disabled=!0,this.hideError();const t={username:n.get("username").trim(),password:n.get("password")};if(!t.username||!t.password)throw new Error("Please enter both username and password");const e=await fetch(`${this.apiUrl}/api/admin/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),o=await e.json();if(!o.success||!o.token)throw new Error(o.message||"Login failed");localStorage.setItem("admin_token",o.token),localStorage.setItem("admin_user",JSON.stringify({username:t.username,loginTime:(new Date).toISOString()})),this.isLoggedIn=!0,this.currentUser={username:t.username,loginTime:(new Date).toISOString()},this.showSuccess("Login successful! Loading dashboard..."),setTimeout(()=>{this.showDashboard(),this.loadDashboardData()},1e3)}catch(t){let e="Login failed. Please try again.";t.message.includes("Invalid credentials")?e="Invalid username or password. Please check your credentials.":t.message.includes("network")||t.message.includes("fetch")?e="Network error. Please check your connection and try again.":(t.message.includes("username")||t.message.includes("password"))&&(e=t.message),this.showError(e)}finally{a.textContent=o,a.disabled=!1}}handleLogout(){this.clearAuthData(),this.isLoggedIn=!1,this.currentUser=null,this.showLogin(),this.showSuccess("Logged out successfully")}clearAuthData(){localStorage.removeItem("admin_token"),localStorage.removeItem("admin_user")}showLogin(){document.getElementById("login-section").classList.remove("hidden"),document.getElementById("dashboard-section").classList.add("hidden"),document.getElementById("logout-btn").style.display="none",this.clearDashboardData()}showDashboard(){if(document.getElementById("login-section").classList.add("hidden"),document.getElementById("dashboard-section").classList.remove("hidden"),document.getElementById("logout-btn").style.display="inline-flex",this.currentUser){const t=document.querySelector(".admin-subtitle");t&&(t.textContent=`Welcome back, ${this.currentUser.username}!`)}}showError(t){const e=document.getElementById("login-error");e&&(e.textContent=t,e.classList.remove("hidden"))}hideError(){const t=document.getElementById("login-error");t&&t.classList.add("hidden")}showSuccess(t){let e=document.getElementById("login-success");if(!e){e=document.createElement("div"),e.id="login-success",e.className="success-message";const t=document.getElementById("login-form");t&&t.insertBefore(e,t.firstChild)}e.textContent=t,e.classList.remove("hidden"),setTimeout(()=>{e.parentElement&&e.classList.add("hidden")},3e3)}async loadDashboardData(){try{const t=localStorage.getItem("admin_token");if(!t)return void this.handleLogout();await this.loadContactsData(t),await this.loadVisitsData(t),this.updateLastRefresh()}catch(t){(t.message.includes("401")||t.message.includes("Unauthorized"))&&this.handleLogout()}}async loadContactsData(t){try{const e=await fetch(`${this.apiUrl}/api/admin/contacts/count`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const n=await e.json();this.updateContactStats(n)}catch(t){this.updateContactStats({total:0,today:0})}}async loadVisitsData(t){try{const e=await fetch(`${this.apiUrl}/api/admin/visits`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const n=await e.json();this.updateVisitsStats(n)}catch(t){this.updateVisitsStats({visits:[]})}}updateContactStats(t){const e=document.getElementById("total-contacts"),n=document.getElementById("new-contacts");e&&void 0!==t.total&&this.animateCounter(e,t.total),n&&void 0!==t.today&&this.animateCounter(n,t.today)}updateVisitsStats(t){const e=t.visits?t.visits.reduce((t,e)=>t+e.count,0):0,n=document.getElementById("monthly-visits");n&&(n.textContent=this.formatNumber(e))}updateLastRefresh(){const t=(new Date).toLocaleTimeString();let e=document.getElementById("last-refresh");e||(e=document.createElement("div"),e.id="last-refresh",e.style.cssText="\n                position: fixed;\n                bottom: 20px;\n                left: 20px;\n                background: rgba(37, 99, 235, 0.1);\n                color: #3b82f6;\n                padding: 0.5rem 1rem;\n                border-radius: 20px;\n                font-size: 0.75rem;\n                border: 1px solid rgba(37, 99, 235, 0.2);\n                backdrop-filter: blur(10px);\n            ",document.body.appendChild(e)),e.textContent=`Last updated: ${t}`}formatNumber(t){return t>=1e6?(t/1e6).toFixed(1)+"M":t>=1e3?(t/1e3).toFixed(1)+"K":t.toString()}animateCounter(t,e){const n=parseInt(t.textContent)||0,a=Math.ceil((e-n)/20);n<e?(t.textContent=n+a,setTimeout(()=>this.animateCounter(t,e),50)):t.textContent=e}clearDashboardData(){document.querySelectorAll(".stat-number").forEach(t=>{t.textContent="0"});const t=document.getElementById("last-refresh");t&&t.remove()}async loadContacts(){try{const t=localStorage.getItem("admin_token");if(!t)return;const e=await fetch(`${this.apiUrl}/api/admin/contacts`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw new Error("Failed to load contacts");{const t=await e.json();this.displayContacts(t)}}catch(t){this.showContactsError("Failed to load contacts")}}async loadAllContacts(){try{const t=localStorage.getItem("admin_token");if(!t)return;const e=await fetch(`${this.apiUrl}/api/admin/contacts/all`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw new Error("Failed to load contacts");{const t=await e.json();this.displayContacts(t.contacts||[])}}catch(t){this.showContactsError("Failed to load contacts")}}displayContacts(t){const e=document.getElementById("contacts-list");if(!e)return;if(0===t.length)return void(e.innerHTML='<p style="text-align: center; color: var(--color-text-secondary);">No contacts found.</p>');const n=t.map(t=>`\n            <div class="contact-item" style="\n                background: var(--glass-bg);\n                border: 1px solid var(--glass-border);\n                border-radius: var(--radius-lg);\n                padding: var(--space-4);\n                margin-bottom: var(--space-4);\n            ">\n                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: var(--space-3);">\n                    <div>\n                        <h4 style="color: var(--color-text); margin-bottom: var(--space-1);">${t.name}</h4>\n                        <p style="color: var(--color-text-secondary); font-size: 0.875rem;">${t.email}</p>\n                        ${t.phone?`<p style="color: var(--color-text-secondary); font-size: 0.875rem;">${t.phone}</p>`:""}\n                    </div>\n                    <div style="text-align: right;">\n                        <span style="color: var(--color-text-muted); font-size: 0.75rem;">${new Date(t.createdAt).toLocaleDateString()}</span>\n                        <br>\n                        <span style="color: var(--color-primary); font-size: 0.75rem; font-weight: 600;">${t.service||"General Inquiry"}</span>\n                    </div>\n                </div>\n                <div style="background: rgba(37, 99, 235, 0.05); padding: var(--space-3); border-radius: var(--radius-md);">\n                    <p style="color: var(--color-text-secondary); line-height: 1.5; margin: 0;">${t.message}</p>\n                </div>\n                <div style="margin-top: var(--space-3); display: flex; gap: var(--space-2);">\n                    <button onclick="markAsRead('${t._id}')" class="admin-btn" style="flex: none; padding: var(--space-1) var(--space-3); font-size: 0.75rem;">\n                        Mark as Read\n                    </button>\n                    <button onclick="deleteContact('${t._id}')" class="admin-btn danger" style="flex: none; padding: var(--space-1) var(--space-3); font-size: 0.75rem;">\n                        Delete\n                    </button>\n                </div>\n            </div>\n        `).join("");e.innerHTML=n}showContactsError(t){const e=document.getElementById("contacts-list");e&&(e.innerHTML=`<p style="text-align: center; color: #dc2626;">${t}</p>`)}}window.viewContacts=async function(){const t=document.getElementById("contacts-modal");t&&(t.style.display="flex",t.style.position="fixed",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.backgroundColor="rgba(0, 0, 0, 0.8)",t.style.alignItems="center",t.style.justifyContent="center",t.style.zIndex="10000",window.adminDashboard&&await window.adminDashboard.loadAllContacts())},window.closeContactsModal=function(){const t=document.getElementById("contacts-modal");t&&(t.style.display="none")},window.exportContacts=async function(){try{const t=localStorage.getItem("admin_token");if(!t)return void alert("Please login first");const e=await fetch(`${window.adminDashboard.apiUrl}/api/admin/contacts/all?limit=1000`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw new Error("Failed to export contacts");{const t=(await e.json()).contacts,n=[["Name","Email","Phone","Service","Message","Date","Status"].join(","),...t.map(t=>[`"${t.name}"`,`"${t.email}"`,`"${t.phone||""}"`,`"${t.service||""}"`,`"${t.message.replace(/"/g,'""')}"`,`"${new Date(t.createdAt).toLocaleDateString()}"`,`"${t.isRead?"Read":"Unread"}"`].join(","))].join("\n"),a=new Blob([n],{type:"text/csv"}),o=window.URL.createObjectURL(a),s=document.createElement("a");s.href=o,s.download=`contacts_${(new Date).toISOString().split("T")[0]}.csv`,document.body.appendChild(s),s.click(),document.body.removeChild(s),window.URL.revokeObjectURL(o),alert("Contacts exported successfully!")}}catch(t){alert("Failed to export contacts. Please try again.")}},window.manageProjects=function(){alert("Project management functionality will be implemented soon!")},window.addProject=function(){alert("Add project functionality will be implemented soon!")},window.manageUsers=function(){alert("User management functionality will be implemented soon!")},window.addUser=function(){window.open("admin-register.html","_blank")},window.viewAnalytics=function(){alert("Detailed analytics functionality will be implemented soon!")},window.exportReport=function(){alert("Report export functionality will be implemented soon!")},window.editContent=function(){alert("Content management functionality will be implemented soon!")},window.manageMedia=function(){alert("Media library functionality will be implemented soon!")},window.systemSettings=function(){alert("System settings functionality will be implemented soon!")},window.createBackup=function(){alert("Backup functionality will be implemented soon!")},window.markAsRead=async function(t){try{const e=localStorage.getItem("admin_token");if(!e)return;if(!(await fetch(`${window.adminDashboard.apiUrl}/api/admin/contacts/${t}/read`,{method:"PATCH",headers:{Authorization:`Bearer ${e}`}})).ok)throw new Error("Failed to mark as read");{await window.adminDashboard.loadAllContacts(),await window.adminDashboard.loadDashboardData();const t=document.createElement("div");t.textContent="Contact marked as read",t.style.cssText="\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                background: #059669;\n                color: white;\n                padding: 0.75rem 1rem;\n                border-radius: 8px;\n                z-index: 10001;\n                font-size: 0.875rem;\n            ",document.body.appendChild(t),setTimeout(()=>t.remove(),3e3)}}catch(t){alert("Failed to mark contact as read")}},window.deleteContact=async function(t){if(confirm("Are you sure you want to delete this contact? This action cannot be undone."))try{const e=localStorage.getItem("admin_token");if(!e)return;if(!(await fetch(`${window.adminDashboard.apiUrl}/api/admin/contacts/${t}`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`}})).ok)throw new Error("Failed to delete contact");{await window.adminDashboard.loadAllContacts(),await window.adminDashboard.loadDashboardData();const t=document.createElement("div");t.textContent="Contact deleted successfully",t.style.cssText="\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                background: #dc2626;\n                color: white;\n                padding: 0.75rem 1rem;\n                border-radius: 8px;\n                z-index: 10001;\n                font-size: 0.875rem;\n            ",document.body.appendChild(t),setTimeout(()=>t.remove(),3e3)}}catch(t){alert("Failed to delete contact")}},document.addEventListener("DOMContentLoaded",function(){window.adminDashboard=new AdminDashboard});